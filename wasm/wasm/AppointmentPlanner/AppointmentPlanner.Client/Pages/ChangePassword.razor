@page "/change-password"
@inject UserSessionService UserSession
@inject NavigationManager Navigation
@inject HttpClient Http
@using System.ComponentModel.DataAnnotations

<h3>Change Password</h3>

@if (!UserSession.IsLoggedIn || UserSession.CurrentUser == null)
{
    <div class="alert alert-warning">You must be logged in to change your password.</div>
}
else
{
    <EditForm Model="changeModel" OnValidSubmit="HandleChangePassword">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label>Current Password</label>
            <InputText type="password" class="form-control" @bind-Value="changeModel.CurrentPassword" />
        </div>
        <div class="form-group">
            <label>New Password</label>
            <InputText type="password" class="form-control" @bind-Value="changeModel.NewPassword" />
        </div>
        <div class="form-group">
            <label>Confirm New Password</label>
            <InputText type="password" class="form-control" @bind-Value="changeModel.ConfirmPassword" />
        </div>
        @if (!string.IsNullOrEmpty(message))
        {
            <div class="alert @messageClass">@message</div>
        }
        <button class="btn btn-primary" type="submit">Change Password</button>
    </EditForm>
}

@code {
    private ChangePasswordModel changeModel = new();
    private string message;
    private string messageClass;

    private async Task HandleChangePassword()
    {
        var user = UserSession.CurrentUser;
        if (user == null)
        {
            message = "User not found.";
            messageClass = "alert-danger";
            return;
        }

        // Client-side validation
        if (string.IsNullOrWhiteSpace(changeModel.NewPassword) || changeModel.NewPassword.Length < 6)
        {
            message = "New password must be at least 6 characters.";
            messageClass = "alert-danger";
            return;
        }

        if (changeModel.NewPassword != changeModel.ConfirmPassword)
        {
            message = "New password and confirmation do not match.";
            messageClass = "alert-danger";
            return;
        }

        var request = new
        {
            CurrentPassword = changeModel.CurrentPassword,
            NewPassword = changeModel.NewPassword
        };

        var response = await Http.PutAsJsonAsync($"api/users/{user.UserId}/change-password", request);

        if (response.IsSuccessStatusCode)
        {
            message = "Password changed successfully.";
            messageClass = "alert-success";
            changeModel = new();
        }
        else if (response.StatusCode == System.Net.HttpStatusCode.BadRequest)
        {
            var error = await response.Content.ReadAsStringAsync();
            message = !string.IsNullOrWhiteSpace(error) ? error : "Current password is incorrect.";
            messageClass = "alert-danger";
        }
        else
        {
            message = "Failed to change password. Please try again.";
            messageClass = "alert-danger";
        }
    }

    public class ChangePasswordModel
    {
        [Required]
        public string CurrentPassword { get; set; }
        [Required]
        [MinLength(6, ErrorMessage = "New password must be at least 6 characters.")]
        public string NewPassword { get; set; }
        [Required]
        [Compare(nameof(NewPassword), ErrorMessage = "Passwords do not match.")]
        public string ConfirmPassword { get; set; }
    }
}